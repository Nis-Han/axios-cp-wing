// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nerd500/axios-cp-wing/client/email_client (interfaces: EmailClientInterface)
//
// Generated by this command:
//
//	mockgen -package mock_email_client -destination ./client/mock_client/mock_email_client/mock_email_client.go github.com/nerd500/axios-cp-wing/client/email_client EmailClientInterface
//
// Package mock_email_client is a generated GoMock package.
package mock_email_client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailClientInterface is a mock of EmailClientInterface interface.
type MockEmailClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientInterfaceMockRecorder
}

// MockEmailClientInterfaceMockRecorder is the mock recorder for MockEmailClientInterface.
type MockEmailClientInterfaceMockRecorder struct {
	mock *MockEmailClientInterface
}

// NewMockEmailClientInterface creates a new mock instance.
func NewMockEmailClientInterface(ctrl *gomock.Controller) *MockEmailClientInterface {
	mock := &MockEmailClientInterface{ctrl: ctrl}
	mock.recorder = &MockEmailClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailClientInterface) EXPECT() *MockEmailClientInterfaceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailClientInterface) SendEmail(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailClientInterfaceMockRecorder) SendEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailClientInterface)(nil).SendEmail), arg0, arg1)
}
